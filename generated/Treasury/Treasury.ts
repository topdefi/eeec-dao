// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChangeActivated extends ethereum.Event {
  get params(): ChangeActivated__Params {
    return new ChangeActivated__Params(this);
  }
}

export class ChangeActivated__Params {
  _event: ChangeActivated;

  constructor(event: ChangeActivated) {
    this._event = event;
  }

  get managing(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get activated(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get result(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChangeQueued extends ethereum.Event {
  get params(): ChangeQueued__Params {
    return new ChangeQueued__Params(this);
  }
}

export class ChangeQueued__Params {
  _event: ChangeQueued;

  constructor(event: ChangeQueued) {
    this._event = event;
  }

  get managing(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get queued(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreateDebt extends ethereum.Event {
  get params(): CreateDebt__Params {
    return new CreateDebt__Params(this);
  }
}

export class CreateDebt__Params {
  _event: CreateDebt;

  constructor(event: CreateDebt) {
    this._event = event;
  }

  get debtor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipPulled extends ethereum.Event {
  get params(): OwnershipPulled__Params {
    return new OwnershipPulled__Params(this);
  }
}

export class OwnershipPulled__Params {
  _event: OwnershipPulled;

  constructor(event: OwnershipPulled) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipPushed extends ethereum.Event {
  get params(): OwnershipPushed__Params {
    return new OwnershipPushed__Params(this);
  }
}

export class OwnershipPushed__Params {
  _event: OwnershipPushed;

  constructor(event: OwnershipPushed) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RepayDebt extends ethereum.Event {
  get params(): RepayDebt__Params {
    return new RepayDebt__Params(this);
  }
}

export class RepayDebt__Params {
  _event: RepayDebt;

  constructor(event: RepayDebt) {
    this._event = event;
  }

  get debtor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ReservesAudited extends ethereum.Event {
  get params(): ReservesAudited__Params {
    return new ReservesAudited__Params(this);
  }
}

export class ReservesAudited__Params {
  _event: ReservesAudited;

  constructor(event: ReservesAudited) {
    this._event = event;
  }

  get totalReserves(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ReservesManaged extends ethereum.Event {
  get params(): ReservesManaged__Params {
    return new ReservesManaged__Params(this);
  }
}

export class ReservesManaged__Params {
  _event: ReservesManaged;

  constructor(event: ReservesManaged) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReservesUpdated extends ethereum.Event {
  get params(): ReservesUpdated__Params {
    return new ReservesUpdated__Params(this);
  }
}

export class ReservesUpdated__Params {
  _event: ReservesUpdated;

  constructor(event: ReservesUpdated) {
    this._event = event;
  }

  get totalReserves(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardsMinted extends ethereum.Event {
  get params(): RewardsMinted__Params {
    return new RewardsMinted__Params(this);
  }
}

export class RewardsMinted__Params {
  _event: RewardsMinted;

  constructor(event: RewardsMinted) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Treasury extends ethereum.SmartContract {
  static bind(address: Address): Treasury {
    return new Treasury("Treasury", address);
  }

  LiquidityDepositorQueue(param0: Address): BigInt {
    let result = super.call(
      "LiquidityDepositorQueue",
      "LiquidityDepositorQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_LiquidityDepositorQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LiquidityDepositorQueue",
      "LiquidityDepositorQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LiquidityManagerQueue(param0: Address): BigInt {
    let result = super.call(
      "LiquidityManagerQueue",
      "LiquidityManagerQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_LiquidityManagerQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LiquidityManagerQueue",
      "LiquidityManagerQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LiquidityTokenQueue(param0: Address): BigInt {
    let result = super.call(
      "LiquidityTokenQueue",
      "LiquidityTokenQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_LiquidityTokenQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LiquidityTokenQueue",
      "LiquidityTokenQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ReserveManagerQueue(param0: Address): BigInt {
    let result = super.call(
      "ReserveManagerQueue",
      "ReserveManagerQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_ReserveManagerQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ReserveManagerQueue",
      "ReserveManagerQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SNOOP(): Address {
    let result = super.call("SNOOP", "SNOOP():(address)", []);

    return result[0].toAddress();
  }

  try_SNOOP(): ethereum.CallResult<Address> {
    let result = super.tryCall("SNOOP", "SNOOP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  blocksNeededForQueue(): BigInt {
    let result = super.call(
      "blocksNeededForQueue",
      "blocksNeededForQueue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_blocksNeededForQueue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blocksNeededForQueue",
      "blocksNeededForQueue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bondCalculator(param0: Address): Address {
    let result = super.call(
      "bondCalculator",
      "bondCalculator(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_bondCalculator(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bondCalculator",
      "bondCalculator(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  debtorBalance(param0: Address): BigInt {
    let result = super.call(
      "debtorBalance",
      "debtorBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_debtorBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtorBalance",
      "debtorBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtorQueue(param0: Address): BigInt {
    let result = super.call("debtorQueue", "debtorQueue(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_debtorQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtorQueue",
      "debtorQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtors(param0: BigInt): Address {
    let result = super.call("debtors", "debtors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_debtors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("debtors", "debtors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(_amount: BigInt, _token: Address, _profit: BigInt): BigInt {
    let result = super.call(
      "deposit",
      "deposit(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_profit)
      ]
    );

    return result[0].toBigInt();
  }

  try_deposit(
    _amount: BigInt,
    _token: Address,
    _profit: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_profit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  excessReserves(): BigInt {
    let result = super.call("excessReserves", "excessReserves():(uint256)", []);

    return result[0].toBigInt();
  }

  try_excessReserves(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "excessReserves",
      "excessReserves():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDebtor(param0: Address): boolean {
    let result = super.call("isDebtor", "isDebtor(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isDebtor(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDebtor", "isDebtor(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidityDepositor(param0: Address): boolean {
    let result = super.call(
      "isLiquidityDepositor",
      "isLiquidityDepositor(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isLiquidityDepositor(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidityDepositor",
      "isLiquidityDepositor(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidityManager(param0: Address): boolean {
    let result = super.call(
      "isLiquidityManager",
      "isLiquidityManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isLiquidityManager(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidityManager",
      "isLiquidityManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidityToken(param0: Address): boolean {
    let result = super.call(
      "isLiquidityToken",
      "isLiquidityToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isLiquidityToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidityToken",
      "isLiquidityToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReserveDepositor(param0: Address): boolean {
    let result = super.call(
      "isReserveDepositor",
      "isReserveDepositor(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isReserveDepositor(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReserveDepositor",
      "isReserveDepositor(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReserveManager(param0: Address): boolean {
    let result = super.call(
      "isReserveManager",
      "isReserveManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isReserveManager(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReserveManager",
      "isReserveManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReserveSpender(param0: Address): boolean {
    let result = super.call(
      "isReserveSpender",
      "isReserveSpender(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isReserveSpender(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReserveSpender",
      "isReserveSpender(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReserveToken(param0: Address): boolean {
    let result = super.call(
      "isReserveToken",
      "isReserveToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isReserveToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReserveToken",
      "isReserveToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRewardManager(param0: Address): boolean {
    let result = super.call(
      "isRewardManager",
      "isRewardManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isRewardManager(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRewardManager",
      "isRewardManager(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityDepositors(param0: BigInt): Address {
    let result = super.call(
      "liquidityDepositors",
      "liquidityDepositors(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_liquidityDepositors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityDepositors",
      "liquidityDepositors(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityManagers(param0: BigInt): Address {
    let result = super.call(
      "liquidityManagers",
      "liquidityManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_liquidityManagers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityManagers",
      "liquidityManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityTokens(param0: BigInt): Address {
    let result = super.call(
      "liquidityTokens",
      "liquidityTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_liquidityTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityTokens",
      "liquidityTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  queue(_managing: i32, _address: Address): boolean {
    let result = super.call("queue", "queue(uint8,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_managing)),
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_queue(_managing: i32, _address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("queue", "queue(uint8,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_managing)),
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reserveDepositorQueue(param0: Address): BigInt {
    let result = super.call(
      "reserveDepositorQueue",
      "reserveDepositorQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_reserveDepositorQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveDepositorQueue",
      "reserveDepositorQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveDepositors(param0: BigInt): Address {
    let result = super.call(
      "reserveDepositors",
      "reserveDepositors(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_reserveDepositors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reserveDepositors",
      "reserveDepositors(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveManagers(param0: BigInt): Address {
    let result = super.call(
      "reserveManagers",
      "reserveManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_reserveManagers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reserveManagers",
      "reserveManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveSpenderQueue(param0: Address): BigInt {
    let result = super.call(
      "reserveSpenderQueue",
      "reserveSpenderQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_reserveSpenderQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveSpenderQueue",
      "reserveSpenderQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveSpenders(param0: BigInt): Address {
    let result = super.call(
      "reserveSpenders",
      "reserveSpenders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_reserveSpenders(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reserveSpenders",
      "reserveSpenders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveTokenQueue(param0: Address): BigInt {
    let result = super.call(
      "reserveTokenQueue",
      "reserveTokenQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_reserveTokenQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveTokenQueue",
      "reserveTokenQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveTokens(param0: BigInt): Address {
    let result = super.call(
      "reserveTokens",
      "reserveTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_reserveTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reserveTokens",
      "reserveTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardManagerQueue(param0: Address): BigInt {
    let result = super.call(
      "rewardManagerQueue",
      "rewardManagerQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardManagerQueue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardManagerQueue",
      "rewardManagerQueue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardManagers(param0: BigInt): Address {
    let result = super.call(
      "rewardManagers",
      "rewardManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_rewardManagers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardManagers",
      "rewardManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sSNOOP(): Address {
    let result = super.call("sSNOOP", "sSNOOP():(address)", []);

    return result[0].toAddress();
  }

  try_sSNOOP(): ethereum.CallResult<Address> {
    let result = super.tryCall("sSNOOP", "sSNOOP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sSNOOPQueue(): BigInt {
    let result = super.call("sSNOOPQueue", "sSNOOPQueue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sSNOOPQueue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sSNOOPQueue", "sSNOOPQueue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toggle(_managing: i32, _address: Address, _calculator: Address): boolean {
    let result = super.call("toggle", "toggle(uint8,address,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_managing)),
      ethereum.Value.fromAddress(_address),
      ethereum.Value.fromAddress(_calculator)
    ]);

    return result[0].toBoolean();
  }

  try_toggle(
    _managing: i32,
    _address: Address,
    _calculator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "toggle",
      "toggle(uint8,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_managing)),
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromAddress(_calculator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalDebt(): BigInt {
    let result = super.call("totalDebt", "totalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReserves(): BigInt {
    let result = super.call("totalReserves", "totalReserves():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReserves(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReserves",
      "totalReserves():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  valueOf(_token: Address, _amount: BigInt): BigInt {
    let result = super.call("valueOf", "valueOf(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_valueOf(_token: Address, _amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "valueOf",
      "valueOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _SNOOP(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _DOG(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _DOGBondCalculator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _blocksNeededForQueue(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuditReservesCall extends ethereum.Call {
  get inputs(): AuditReservesCall__Inputs {
    return new AuditReservesCall__Inputs(this);
  }

  get outputs(): AuditReservesCall__Outputs {
    return new AuditReservesCall__Outputs(this);
  }
}

export class AuditReservesCall__Inputs {
  _call: AuditReservesCall;

  constructor(call: AuditReservesCall) {
    this._call = call;
  }
}

export class AuditReservesCall__Outputs {
  _call: AuditReservesCall;

  constructor(call: AuditReservesCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _profit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get send_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncurDebtCall extends ethereum.Call {
  get inputs(): IncurDebtCall__Inputs {
    return new IncurDebtCall__Inputs(this);
  }

  get outputs(): IncurDebtCall__Outputs {
    return new IncurDebtCall__Outputs(this);
  }
}

export class IncurDebtCall__Inputs {
  _call: IncurDebtCall;

  constructor(call: IncurDebtCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class IncurDebtCall__Outputs {
  _call: IncurDebtCall;

  constructor(call: IncurDebtCall) {
    this._call = call;
  }
}

export class ManageCall extends ethereum.Call {
  get inputs(): ManageCall__Inputs {
    return new ManageCall__Inputs(this);
  }

  get outputs(): ManageCall__Outputs {
    return new ManageCall__Outputs(this);
  }
}

export class ManageCall__Inputs {
  _call: ManageCall;

  constructor(call: ManageCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ManageCall__Outputs {
  _call: ManageCall;

  constructor(call: ManageCall) {
    this._call = call;
  }
}

export class MintRewardsCall extends ethereum.Call {
  get inputs(): MintRewardsCall__Inputs {
    return new MintRewardsCall__Inputs(this);
  }

  get outputs(): MintRewardsCall__Outputs {
    return new MintRewardsCall__Outputs(this);
  }
}

export class MintRewardsCall__Inputs {
  _call: MintRewardsCall;

  constructor(call: MintRewardsCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintRewardsCall__Outputs {
  _call: MintRewardsCall;

  constructor(call: MintRewardsCall) {
    this._call = call;
  }
}

export class PullManagementCall extends ethereum.Call {
  get inputs(): PullManagementCall__Inputs {
    return new PullManagementCall__Inputs(this);
  }

  get outputs(): PullManagementCall__Outputs {
    return new PullManagementCall__Outputs(this);
  }
}

export class PullManagementCall__Inputs {
  _call: PullManagementCall;

  constructor(call: PullManagementCall) {
    this._call = call;
  }
}

export class PullManagementCall__Outputs {
  _call: PullManagementCall;

  constructor(call: PullManagementCall) {
    this._call = call;
  }
}

export class PushManagementCall extends ethereum.Call {
  get inputs(): PushManagementCall__Inputs {
    return new PushManagementCall__Inputs(this);
  }

  get outputs(): PushManagementCall__Outputs {
    return new PushManagementCall__Outputs(this);
  }
}

export class PushManagementCall__Inputs {
  _call: PushManagementCall;

  constructor(call: PushManagementCall) {
    this._call = call;
  }

  get newOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PushManagementCall__Outputs {
  _call: PushManagementCall;

  constructor(call: PushManagementCall) {
    this._call = call;
  }
}

export class QueueCall extends ethereum.Call {
  get inputs(): QueueCall__Inputs {
    return new QueueCall__Inputs(this);
  }

  get outputs(): QueueCall__Outputs {
    return new QueueCall__Outputs(this);
  }
}

export class QueueCall__Inputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get _managing(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class QueueCall__Outputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceManagementCall extends ethereum.Call {
  get inputs(): RenounceManagementCall__Inputs {
    return new RenounceManagementCall__Inputs(this);
  }

  get outputs(): RenounceManagementCall__Outputs {
    return new RenounceManagementCall__Outputs(this);
  }
}

export class RenounceManagementCall__Inputs {
  _call: RenounceManagementCall;

  constructor(call: RenounceManagementCall) {
    this._call = call;
  }
}

export class RenounceManagementCall__Outputs {
  _call: RenounceManagementCall;

  constructor(call: RenounceManagementCall) {
    this._call = call;
  }
}

export class RepayDebtWithReserveCall extends ethereum.Call {
  get inputs(): RepayDebtWithReserveCall__Inputs {
    return new RepayDebtWithReserveCall__Inputs(this);
  }

  get outputs(): RepayDebtWithReserveCall__Outputs {
    return new RepayDebtWithReserveCall__Outputs(this);
  }
}

export class RepayDebtWithReserveCall__Inputs {
  _call: RepayDebtWithReserveCall;

  constructor(call: RepayDebtWithReserveCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RepayDebtWithReserveCall__Outputs {
  _call: RepayDebtWithReserveCall;

  constructor(call: RepayDebtWithReserveCall) {
    this._call = call;
  }
}

export class RepayDebtWithSNOOPCall extends ethereum.Call {
  get inputs(): RepayDebtWithSNOOPCall__Inputs {
    return new RepayDebtWithSNOOPCall__Inputs(this);
  }

  get outputs(): RepayDebtWithSNOOPCall__Outputs {
    return new RepayDebtWithSNOOPCall__Outputs(this);
  }
}

export class RepayDebtWithSNOOPCall__Inputs {
  _call: RepayDebtWithSNOOPCall;

  constructor(call: RepayDebtWithSNOOPCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayDebtWithSNOOPCall__Outputs {
  _call: RepayDebtWithSNOOPCall;

  constructor(call: RepayDebtWithSNOOPCall) {
    this._call = call;
  }
}

export class ToggleCall extends ethereum.Call {
  get inputs(): ToggleCall__Inputs {
    return new ToggleCall__Inputs(this);
  }

  get outputs(): ToggleCall__Outputs {
    return new ToggleCall__Outputs(this);
  }
}

export class ToggleCall__Inputs {
  _call: ToggleCall;

  constructor(call: ToggleCall) {
    this._call = call;
  }

  get _managing(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _calculator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ToggleCall__Outputs {
  _call: ToggleCall;

  constructor(call: ToggleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
